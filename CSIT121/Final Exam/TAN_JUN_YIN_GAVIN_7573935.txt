public class Question1 {
    public static void main(String[] args) {
        printNumbers(21, 29, 4);
        printNumbers(4, 12, 6);

        System.out.println(hasDuplicateChars("abcala2"));
        System.out.println(hasDuplicateChars("morning"));
        System.out.println(hasDuplicateChars("ab$wx$y"));
        System.out.println(hasDuplicateChars("35 x 12"));
        System.out.println(hasDuplicateChars("methods"));

        System.out.println(replaceWith("programming", 'r', 'R'));
        System.out.println(replaceWith("java", 'a', 'A'));
        System.out.println(replaceWith("1+2x3+4", '+', '%'));
        System.out.println(replaceWith("22 Jun 2022", ' ', '-'));

        System.out.println(countDigit(5, 0));
        System.out.println(countDigit(1, 1));
        System.out.println(countDigit(12257212, 2));
        System.out.println(countDigit(51299189, 9));
    }

    public static void printNumbers(int startNum, int endNum, int numPerLine) {
        for (int i = startNum; i <= endNum; i++) {
            System.out.print(i + " ");

            int trueCount = i - startNum + 1;

            if (trueCount != 0 && trueCount % numPerLine == 0)
                System.out.println("\n");
        }
    }

    public static boolean hasDuplicateChars(String data) {
        Boolean response = false;
        for (int i = 0; i < data.length(); i++) {
            for (int j = i + 1; j < data.length(); j++) {
                if (data.charAt(i) == data.charAt(j))
                    response = true;
            }
        }
        return response;
    }

    public static String replaceWith(String data, char ch1, char ch2) {
        if (data.length() < 1)
            return data;
        else {
            char letter = data.charAt(0);

            if (ch1 == data.charAt(0))
                letter = ch2;

            return letter + replaceWith(data.substring(1), ch1, ch2);
        }
    }

    public static int countDigit(int number, int digit) {
        if (number == 0)
            return 0;

        int nextDigit = number % 10;

        if (nextDigit == digit)
            return 1 + countDigit(number / 10, digit);

        return countDigit(number / 10, digit);
    }
}

import java.util.Scanner;
import java.util.ArrayList;

public class Question2 {
    public static boolean doesIDExist(String id, ArrayList<ProjMember> projMembers) {
        Boolean response = false;
        for (int i = 0; i < projMembers.size(); i++) {
            if (id.equals(projMembers.get(i).getId()))
                response = true;
        }
        return response;
    }

    public static boolean doesTeamNameExist(String teamName, ArrayList<ProjTeam> projTeam) {
        Boolean response = false;
        for (int i = 0; i < projTeam.size(); i++) {
            if (teamName.equals(projTeam.get(i).getTeamName()))
                return true;
        }
        return response;
    }

    public static void main(String[] args) {
        ArrayList<ProjTeam> projTeamList = new ArrayList<ProjTeam>();
        ArrayList<ProjMember> projMemberList = new ArrayList<ProjMember>();

        Scanner input = new Scanner(System.in);
        boolean run = true;

        while (run) {
            System.out.println("1 Add member");
            System.out.println("2 Remove member");
            System.out.println("3 Add project team");
            System.out.println("4 Add member to project team");
            System.out.println("5 Remove member from project team");
            System.out.println("6 Print all teams");
            System.out.println("7 Quit");
            System.out.println("Your selection:");

            String response = input.nextLine();
            switch (response) {
                case "1":
                    System.out.println("Enter the new member's ID");
                    String newID = input.nextLine();
                    System.out.println("Enter the new member's Name");
                    String newName = input.nextLine();
                    System.out.println("Enter the new member's Email");
                    String newEmail = input.nextLine();

                    if (projMemberList.size() == 0) {
                        ProjMember member = new ProjMember(newID, newName, newEmail);

                        projMemberList.add(member);

                        System.out.println(member.toString() + " has been registed successfully");
                    } else {
                        for (int i = 0; i < projMemberList.size(); i++) {
                            if (newID.equals(projMemberList.get(i).getId())
                                    && newEmail.equals(projMemberList.get(i).getEmail())) {
                                System.out.println("This member is already registed in the project member's list");
                            } else {
                                ProjMember member = new ProjMember(newID, newName, newEmail);

                                projMemberList.add(member);

                                System.out.println(member.toString() + " has been registed successfully");
                            }
                        }
                    }

                    break;
                case "2":
                    System.out.println("Enter the member's ID that you want to remove");
                    String IDtoRemove = input.nextLine();

                    if (doesIDExist(IDtoRemove, projMemberList)) {
                        if (projMemberList.size() == 0)
                            System.out.println("This member does not exist in the project member's list");

                        for (int i = 0; i < projTeamList.size(); i++) {
                            if (doesIDExist(IDtoRemove, projTeamList.get(i).getProjMembers()))
                                System.out.println("This member is still part of a project team");
                            else {
                                for (int a = 0; a < projMemberList.size(); a++) {
                                    if (IDtoRemove.equals(projMemberList.get(a).getId()))
                                        projMemberList.remove(a);
                                    System.out.println(
                                            "This member has been successfully removed from the project member's list");

                                }
                            }
                        }
                    } else
                        System.out.println("This member does not exist in the project member's list");

                    break;
                case "3":
                    System.out.println("Enter the new project team's name");
                    String newTeamName = input.nextLine();

                    if (projTeamList.size() == 0) {
                        ProjTeam projTeam = new ProjTeam(newTeamName);

                        projTeamList.add(projTeam);

                        System.out.println(newTeamName + " has been successfully added to the project team list");
                    } else {
                        for (int i = 0; i < projTeamList.size(); i++) {
                            if (doesTeamNameExist(newTeamName, projTeamList))
                                System.out.println("This project team name already exists");
                            else {
                                ProjTeam projTeam = new ProjTeam(newTeamName);

                                projTeamList.add(projTeam);

                                System.out
                                        .println(newTeamName + " has been successfully added to the project team list");
                            }
                        }
                    }
                    break;
                case "4":
                    System.out.println("Enter the project team's name");
                    String addingTeamName = input.nextLine();
                    System.out.println("Enter the member's ID that you want to add");
                    String addingMemberId = input.nextLine();

                    Boolean doesExist = false;

                    if (!doesTeamNameExist(addingTeamName, projTeamList)) {
                        System.out.println("This project team name does not exist");
                        doesExist = true;
                    }

                    if (!doesIDExist(addingMemberId, projMemberList)) {

                        System.out.println("This member is not registed in the project member's list");
                        doesExist = true;
                    }

                    if (!doesExist) {
                        for (int a = 0; a < projTeamList.size(); a++) {
                            if (addingTeamName.equals(projTeamList.get(a).getTeamName())) {
                                ArrayList<ProjMember> currentProjMembers = new ArrayList<ProjMember>();
                                if (projTeamList.get(a).getProjMembers() != null) {
                                    currentProjMembers = projTeamList.get(a).getProjMembers();
                                }
                                for (int b = 0; b < projMemberList.size(); b++) {
                                    if (addingMemberId.equals(projMemberList.get(b).getId())) {
                                        currentProjMembers.add(projMemberList.get(b));
                                    }
                                }

                                projTeamList.get(a).setProjMembers(currentProjMembers);
                                System.out.println("The member's list for project team name "
                                        + projTeamList.get(a).getTeamName() + " has been updated");

                            }
                        }
                    }

                    break;
                case "5":
                    System.out.println("Enter the project team's name");
                    String teamNameToRemove = input.nextLine();
                    System.out.println("Enter the member's ID that you want to remove");
                    String memberIDToRemove = input.nextLine();

                    doesExist = true;

                    if (!doesTeamNameExist(teamNameToRemove, projTeamList)) {
                        System.out.println("This project team name does not exist");
                        doesExist = false;
                    }

                    if (!doesIDExist(memberIDToRemove, projMemberList)) {
                        System.out.println("This member is not registed in the project member's list");
                        doesExist = false;
                    }

                    if (doesExist) {
                        for (int a = 0; a < projTeamList.size(); a++) {
                            if (teamNameToRemove.equals(projTeamList.get(a).getTeamName())) {
                                ArrayList<ProjMember> currentProjMembers = new ArrayList<ProjMember>();
                                if (projTeamList.get(a).getProjMembers() != null) {
                                    currentProjMembers = projTeamList.get(a).getProjMembers();
                                }
                                for (int b = 0; b < projMemberList.size(); b++) {
                                    if (memberIDToRemove.equals(projMemberList.get(b).getId())) {
                                        currentProjMembers.remove(projMemberList.get(b));
                                    }
                                }

                                projTeamList.get(a).setProjMembers(currentProjMembers);
                            }
                        }
                    }

                    break;
                case "6":
                    for (int a = 0; a < projTeamList.size(); a++) {
                        System.out.println(projTeamList.get(a));
                    }

                    break;
                default:
                    run = false;
                    break;
            }
        }
    }

}

class ProjMember {
    private String id, name, email;

    public ProjMember(String id, String name, String email) {
        this.id = id;
        this.name = name;
        this.email = email;
    }

    String getId() {
        return this.id;
    }

    String getName() {
        return this.name;
    }

    String getEmail() {
        return this.email;
    }

    void setId(String id) {
        this.id = id;
    }

    void setName(String name) {
        this.name = name;
    }

    void setEmail(String email) {
        this.email = email;
    }

    @Override
    public String toString() {
        return "ID: " + this.getId() + " Name: " + this.getName() + " Email: " + this.getEmail();
    }
}

class ProjTeam {
    private String teamName;
    private ArrayList<ProjMember> projMembers;

    public ProjTeam(String teamName) {
        this.teamName = teamName;
    }

    String getTeamName() {
        return this.teamName;
    }

    ArrayList<ProjMember> getProjMembers() {
        return this.projMembers;
    }

    void setTeamName(String teamName) {
        this.teamName = teamName;
    }

    void setProjMembers(ArrayList<ProjMember> projMembers) {
        this.projMembers = projMembers;
    }

    @Override
    public String toString() {
        String returnString = "";
        for (int i = 0; i < this.projMembers.size(); i++) {
            returnString += "ID: " + this.projMembers.get(i).getId() + " Name: " + this.projMembers.get(i).getName()
                    + " Email: "
                    + this.projMembers.get(i).getEmail() + "\n";
        }

        return returnString;
    }
}

import java.util.Scanner;
import java.util.ArrayList;
import java.nio.file.Paths;
import java.io.FileNotFoundException;

public class Question3 {
    public static boolean isValidNumber(String number) {
        Boolean response = false;
        if (number.matches("[+-]?([0-9]*[.])?[0-9]+"))
            response = true;

        return response;
    }

    public static void main(String[] args) {
        ArrayList<Rectangle> shapes = new ArrayList<Rectangle>();

        try {

            Scanner input = new Scanner(System.in);

            System.out.println("File path? ");
            String filename = input.nextLine();

            try (Scanner file = new Scanner(Paths.get(filename))) { // To avoid wasting of resources

                while (file.hasNext()) { // Checking for each line of data in the file
                    String line = file.next();
                    String[] splitLine = line.split(",");

                    String type = splitLine[0];

                    Float length, width;
                    Float height = (float) 0;
                    boolean isValid = true;

                    if (isValidNumber(splitLine[1]) && isValidNumber(splitLine[2])) {
                        length = Float.parseFloat(splitLine[1]);
                        width = Float.parseFloat(splitLine[2]);
                        if (length <= 0 && width <= 0)
                            isValid = false;

                        if (type.equalsIgnoreCase("C") || type.equalsIgnoreCase("P")) {
                            if (isValidNumber(splitLine[3])) {
                                height = Float.parseFloat(splitLine[3]);
                                if (height <= 0)
                                    isValid = false;
                            }
                        }

                        if (isValid) {
                            if (type.equalsIgnoreCase("R")) {
                                Rectangle r = new Rectangle(length, width);
                                shapes.add(r);
                            }

                            if (type.equalsIgnoreCase("C")) {
                                Cuboid c = new Cuboid(length, width, height);
                                shapes.add(c);
                            }

                            if (type.equalsIgnoreCase("P")) {
                                Pyramid p = new Pyramid(length, width, height);
                                shapes.add(p);
                            }
                        }
                    }
                }

                boolean run = true;
                while (run) {
                    System.out.println("1 Search by length");
                    System.out.println("2 Search by height");
                    System.out.println("3 Quit");
                    System.out.println("Your selection:");

                    String response = input.nextLine();
                    switch (response) {
                        case "1":
                            System.out.println("Input length");
                            String inputLength = input.nextLine();
                            Float length;

                            Boolean doesExist = false;

                            if (isValidNumber(inputLength)) {
                                length = Float.parseFloat(inputLength);

                                if (length > 0) {
                                    for (int i = 0; i < shapes.size(); i++) {
                                        if (shapes.get(i).getLength() >= length) {
                                            System.out.println(shapes.get(i));
                                            doesExist = true;
                                        }
                                    }
                                } else {
                                    System.out.println("Invalid Input");
                                }

                            } else
                                System.out.println("Invalid Input");

                            if (!doesExist) {
                                System.out
                                        .println("There are no shapes that has a length >= to the length you entered");
                            }
                            break;
                        case "2":
                            System.out.println("Input height");
                            String inputHeight = input.nextLine();
                            Float height;

                            doesExist = false;

                            if (isValidNumber(inputHeight)) {
                                height = Float.parseFloat(inputHeight);

                                if (height > 0) {
                                    for (Rectangle shape : shapes) {
                                        if (shape instanceof Pyramid) {
                                            if (((Pyramid) shape).getHeight() >= height) {
                                                System.out.println(shape);
                                                doesExist = true;
                                            }
                                        }

                                        if (shape instanceof Cuboid) {
                                            if (((Cuboid) shape).getHeight() >= height) {
                                                System.out.println(shape);
                                                doesExist = true;
                                            }
                                        }
                                    }

                                } else {
                                    System.out.println("Invalid Input");
                                }

                            } else
                                System.out.println("Invalid Input");

                            if (!doesExist) {
                                System.out
                                        .println("There are no shapes that has a length >= to the length you entered");
                            }
                            break;
                        default: // Save and Quit
                            run = false;
                            break;
                    }
                }
            } catch (FileNotFoundException e) {
                System.out.println(e);
            }

            input.close();
        } catch (Exception e) {
            System.out.println(e);
        }
    }
}

class Rectangle {
    private float length, width;

    public Rectangle(float length, float width) {
        this.length = length;
        this.width = width;
    }

    float getLength() {
        return this.length;
    }

    float getWidth() {
        return this.width;
    }

    void setLength(float length) {
        this.length = length;
    }

    void setWidth(float width) {
        this.width = width;
    }

    float getArea() {
        return this.length * this.width;
    }

    @Override
    public String toString() {
        return "Rectange with a length of " + this.getLength() + " and a width of " + this.getWidth()
                + " has an area of " + this.getArea();
    }
}

class Cuboid extends Rectangle {
    private float height;

    public Cuboid(float length, float width, float height) {
        super(length, width);
        this.height = height;
    }

    float getHeight() {
        return this.height;
    }

    void setHeight(float height) {
        this.height = height;
    }

    @Override
    float getArea() {
        float surfaceArea = 2 * (this.getLength() * this.getWidth()) + 2 * (this.getLength() * this.height)
                + 2 * (this.getWidth() + this.height);
        return surfaceArea;
    }

    float getVolume() {
        float volume = this.getLength() * this.getWidth() * this.height;
        return volume;
    }

    @Override
    public String toString() {
        return "Cuboid with a length of " + this.getLength() + " and a width of " + this.getWidth()
                + " and a height of " + this.height
                + " has a surface area of " + this.getArea() + " and a volume of " + this.getVolume();
    }
}

class Pyramid extends Rectangle {
    private float height;

    public Pyramid(float length, float width, float height) {
        super(length, width);
        this.height = height;
    }

    float getHeight() {
        return this.height;
    }

    void setHeight(float height) {
        this.height = height;
    }

    float getVolume() {
        float volume = (this.getLength() * this.getWidth() * this.height) / 3;
        return volume;
    }

    @Override
    public String toString() {
        return "Pyramid with a length of " + this.getLength() + " and a width of " + this.getWidth()
                + " and a height of " + this.height
                + " has a volume of " + this.getVolume();
    }
}

import java.awt.*;
import javax.swing.*;
import java.awt.event.*;

public class Question4 {
    public static void main(String[] args) {
        ShiftCipher myApp = new ShiftCipher();
        myApp.createUI();
        myApp.setVisible(true);
    }
}

class ShiftCipher extends JFrame implements ActionListener {
    private JTextField txShift, txMessage, txEncrypted, txDecrypted;
    private JButton bnSet, bnEncrypt, bnDecrypt, bnReset;
    private Boolean isShiftSet = false;
    private int shift = 0;

    public void createUI() {
        this.setTitle("Shift Cipher");
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setLocationRelativeTo(null);

        Container uiPane = this.getContentPane();
        txShift = new JTextField();
        txMessage = new JTextField();
        txEncrypted = new JTextField();
        txDecrypted = new JTextField();

        JLabel lbShift = new JLabel("Shift");
        JLabel lbMessage = new JLabel("Message");
        JLabel lbEncrypted = new JLabel("Encrypted");
        JLabel lbDecrypted = new JLabel("Decrypted");

        bnSet = new JButton("Set");
        bnEncrypt = new JButton("Encrypt");
        bnDecrypt = new JButton("Decrypt");
        bnReset = new JButton("Reset");

        Box txLayout = Box.createVerticalBox();

        Box txShiftLayout = Box.createHorizontalBox();
        txShiftLayout.add(lbShift);
        txShiftLayout.add(txShift);
        txShiftLayout.add(bnSet);
        txLayout.add(txShiftLayout);

        Box txMessageLayout = Box.createHorizontalBox();
        txMessageLayout.add(lbMessage);
        txMessageLayout.add(txMessage);
        txMessageLayout.add(bnEncrypt);
        txLayout.add(txMessageLayout);

        Box txEncryptedLayout = Box.createHorizontalBox();
        txEncryptedLayout.add(lbEncrypted);
        txEncryptedLayout.add(txEncrypted);
        txEncryptedLayout.add(bnDecrypt);
        txLayout.add(txEncryptedLayout);

        Box txDecryptedLayout = Box.createHorizontalBox();
        txDecryptedLayout.add(lbDecrypted);
        txDecryptedLayout.add(txDecrypted);
        txDecryptedLayout.add(bnReset);
        txLayout.add(txDecryptedLayout);

        uiPane.add(txLayout, BorderLayout.NORTH);

        this.pack();
        bnSet.addActionListener(this);
        bnEncrypt.addActionListener(this);
        bnDecrypt.addActionListener(this);
        bnReset.addActionListener(this);
    }

    String messageToCipher(String message, int shift) {
        String cipherText = "";

        for (int i = 0; i < message.length(); i++) {
            char c = (char) (message.charAt(i) + shift);

            if (c > 'z')
                cipherText += (char) (message.charAt(i) - (26 - shift));
            else
                cipherText += (char) (message.charAt(i) + shift);
        }

        return cipherText;
    }

    String decipherMessage(String cipherText, int shift) {
        String message = "";

        for (int i = 0; i < message.length(); i++) {
            char c = (char) (message.charAt(i) - shift);

            if (c > 'a')
                message += (char) (message.charAt(i) + (26 + shift));
            else
                message += (char) (message.charAt(i) - shift);
        }

        return message;
    }

    @Override
    public void actionPerformed(ActionEvent event) {
        String action = event.getActionCommand();

        if (action.equals("Set")) {
            shift = Integer.parseInt(txShift.getText());

            if (shift <= 0 || shift >= 26) {
                JOptionPane.showMessageDialog(null,
                        "Shift value must be 1 to 25",
                        "",
                        JOptionPane.ERROR_MESSAGE);
                isShiftSet = false;
            } else {
                isShiftSet = true;
            }
        }

        if (isShiftSet) {
            if (action.equals("Encrypt")) {
                String message = txMessage.getText();
                String encrypted = messageToCipher(message, shift);

                txEncrypted.setText(encrypted);
            }

            if (action.equals("Decrypt")) {
                String cipherText = txEncrypted.getText();
                String deciphered = messageToCipher(cipherText, shift);

                txDecrypted.setText(deciphered);
            }
        }
    }

}
